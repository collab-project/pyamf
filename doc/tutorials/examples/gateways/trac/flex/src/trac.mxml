<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   width="100%" height="100%">

	<s:layout>
		<s:VerticalLayout gap="10" verticalAlign="middle"
						  horizontalAlign="center" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.abdulqabiz.net.HTTPURLLoader;
			
			import mx.messaging.messages.AbstractMessage;
			import mx.messaging.messages.AsyncMessage;
			import mx.messaging.messages.ISmallMessage;
			import mx.utils.Base64Encoder;
			import mx.utils.ObjectUtil;
			
			private var _connection 	: NetConnection;
			private var _responder		: Responder;
			
			private var loader			: URLLoader;
			
			protected function getApiVersion(event:MouseEvent):void
			{
				connect();
				
				_responder = new Responder( displayVersion, remoteFault );
				
				// call service
				//_connection.call("system.getAPIVersion", _responder );
			}
			
			protected function getTickets(event:MouseEvent):void
			{
				connect();
				
				_responder = new Responder( displayTickets, remoteFault );
				
				// call service
				//_connection.call("ticket.query", _responder, "max=0");
			}
			
			private function connect():void
			{
				if ( host_txt.text && username_txt.text && password_txt.text )
				{
					/*
					loader = new HTTPURLLoader();
					loader.addEventListener("complete", onComplete);
					loader.addEventListener("httpStatus", onHTTPStatus);
					loader.addEventListener("progress", onProgress);
					*/
					
					// connection
					_connection = new NetConnection();
					_connection.addEventListener( NetStatusEvent.NET_STATUS, onFault );
					loadURL();
				}
			}
			
			private function onComplete(event:Event):void
			{
				/*
				//headers stroed as name-value(hash map)
				var rh:Object = HTTPURLLoader(event.target).responseHeaders;
				
				var str:String = "";
				for(var p:String in rh)
				{
					str+= p + ":" + rh[p] + "\n";
				}
				
				trace("Response Headers: \n" + str + "\n\n");
				*/
				//data property holds the content
				var ba:ByteArray = loader.data as ByteArray;
				var o:Object = ba.readObject();
				trace(loader.data);
			}
			
			private function onProgress(event:ProgressEvent):void
			{
				//bytesTotal is not accurate, and its 0 if server doesn't send Content-Length header.
				trace( "Event: progress:-\n" + "bytesLoaded: " + event.bytesLoaded + "\n\n" );
			}
			
			private function onHTTPStatus(event:HTTPStatusEvent):void
			{
				//if httpStatus is 401, 403, 404, 500, 501, socket is closed.
				
				trace( "Event: httpStatus (" + event.status + ")\n\n");
				
				if ( event.status == 200 )
				{
					//_connection.call("system.getAPIVersion", _responder );
				}
			} 
			
			private function loadURL():void
			{
				var ba:ByteArray = new ByteArray();
				ba.writeObject({ target: "system.getAPIVersion" });
				
				var request:URLRequest = new URLRequest();
				request.url = host_txt.text;
				request.method = URLRequestMethod.POST;
				request.data = ba;
				//request.contentType = "application/x-amf";
				
				// add HTTP Auth request header
				var authHeader:URLRequestHeader = new URLRequestHeader();
				var encoder64:Base64Encoder = new Base64Encoder();
				authHeader.name = 'Authorization';
				encoder64.encode(username_txt.text + ":" + password_txt.text);
				authHeader.value = 'Basic ' + encoder64.flush();
				request.requestHeaders.push(authHeader);
				
				loader = new URLLoader(request);
				//loader.dataFormat = URLLoaderDataFormat.BINARY;
				loader.addEventListener(Event.COMPLETE, onComplete);
				loader.addEventListener(IOErrorEvent.IO_ERROR, remoteFault );
				
				//make the request.
				loader.load( request );
			}
		
			private function displayVersion(re:*): void
			{
				if ( re is Array )
				{
					version.text = ( re as Array ).join( "." );
				}
				else
				{
					version.text = re;
				}
			}
			
			private function displayTickets(re:*): void
			{
				if ( re is Array )
				{
					tickets.text = "Found " + re.length + " ticket(s).";
				}
				else
				{
					tickets.text = re;
				}
			}
			
			private function onFault(fault:*): void
			{
				issue.text = fault.info.code;
			}
			
			private function remoteFault(fault:*): void
			{
				issue.text = fault.toString();
			}

		]]>
	</fx:Script>

	<s:Form>
		<s:layout>
			<s:FormLayout gap="-14"/>
		</s:layout>
		<s:FormItem label="Host">
			<s:TextInput id="host_txt" text="http://collab.dev/trac/login/amfrpc"
						 width="300"/>
		</s:FormItem>
		<s:FormItem label="Username">
			<s:TextInput id="username_txt" text="admin" width="300"/>
		</s:FormItem>
		<s:FormItem label="Password">
			<s:TextInput id="password_txt" text="admin" width="300"/>
		</s:FormItem>
	</s:Form>
	
	<s:HGroup verticalAlign="middle" gap="30">
		<s:Button label="Get API Version" click="getApiVersion(event)"/>
		
	    <s:RichText id="version" width="100%" fontSize="16" fontWeight="bold"
					textAlign="center" verticalAlign="middle" paddingTop="2"/>
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle" gap="30">
		<s:Button label="Get Tickets" click="getTickets(event)"/>
		
		<s:RichText id="tickets" width="100%" fontSize="16" fontWeight="bold"
					textAlign="center" verticalAlign="middle" paddingTop="2"/>
	</s:HGroup>
	
	<s:RichText id="issue" width="100%" fontSize="14"
				textAlign="center" verticalAlign="middle"/>
	
</s:Application>
